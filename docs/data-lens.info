This is data-lens.info, produced by makeinfo version 6.7 from
data-lens.texi.

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* data-lens Reference: (data-lens). The data-lens Reference Manual.
END-INFO-DIR-ENTRY


File: data-lens.info,  Node: Top,  Next: Systems,  Prev: (dir),  Up: (dir)

The data-lens Reference Manual
******************************

This is the data-lens Reference Manual, generated automatically by Declt
version 3.0 "Montgomery Scott" on Wed Jan 06 14:19:05 2021 GMT-8.

* Menu:

* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types


File: data-lens.info,  Node: Systems,  Next: Files,  Prev: Top,  Up: Top

1 Systems
*********

The main system appears first, followed by any subsystem dependency.

* Menu:

* The data-lens system::


File: data-lens.info,  Node: The data-lens system,  Prev: Systems,  Up: Systems

1.1 data-lens
=============

*Author*
     Edward Langley <<el-cl@elangley.org>>
*License*
     MIT
*Description*
     Utilities for building data transformations from composable
     functions, modeled on lenses and transducers
*Dependencies*
        • cl-ppcre
        • alexandria
        • serapeum
*Source*
     *note data-lens.asd: go to the data-lens․asd file. (file)
*Components*
        • *note package.lisp: go to the data-lens/package․lisp file.
          (file)
        • *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
        • *note lens.lisp: go to the data-lens/lens․lisp file. (file)


File: data-lens.info,  Node: Files,  Next: Packages,  Prev: Systems,  Up: Top

2 Files
*******

Files are sorted by type and then listed depth-first from the systems
components trees.

* Menu:

* Lisp files::


File: data-lens.info,  Node: Lisp files,  Prev: Files,  Up: Files

2.1 Lisp
========

* Menu:

* The data-lens.asd file: The data-lens․asd file.
* The data-lens/package.lisp file: The data-lens/package․lisp file.
* The data-lens/optics.lisp file: The data-lens/optics․lisp file.
* The data-lens/lens.lisp file: The data-lens/lens․lisp file.


File: data-lens.info,  Node: The data-lens․asd file,  Next: The data-lens/package․lisp file,  Prev: Lisp files,  Up: Lisp files

2.1.1 data-lens.asd
-------------------

*Location*
     data-lens.asd
*Systems*
     *note data-lens: go to the data-lens system. (system)


File: data-lens.info,  Node: The data-lens/package․lisp file,  Next: The data-lens/optics․lisp file,  Prev: The data-lens․asd file,  Up: Lisp files

2.1.2 data-lens/package.lisp
----------------------------

*Parent*
     *note data-lens: go to the data-lens system. (system)
*Location*
     package.lisp
*Packages*
        • *note data-lens: go to the DATA-LENS package.
        • *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
        • *note data-lens.package: go to the DATA-LENS․PACKAGE package.
        • *note data-lens.lenses: go to the DATA-LENS․LENSES package.
        • *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.


File: data-lens.info,  Node: The data-lens/optics․lisp file,  Next: The data-lens/lens․lisp file,  Prev: The data-lens/package․lisp file,  Up: Lisp files

2.1.3 data-lens/optics.lisp
---------------------------

*Dependency*
     *note package.lisp: go to the data-lens/package․lisp file. (file)
*Parent*
     *note data-lens: go to the data-lens system. (system)
*Location*
     optics.lisp
*Exported Definitions*
        • *note make-alist-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-ALIST-LENS function. (function)
        • *note make-hash-table-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-HASH-TABLE-LENS function. (function)
        • *note make-list-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-LIST-LENS function. (function)
        • *note make-plist-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-PLIST-LENS function. (function)
        • *note over: go to the DATA-LENS․LENSES∶∶OVER function.
          (function)
        • *note set: go to the DATA-LENS․LENSES∶∶SET function.
          (function)
        • *note view: go to the DATA-LENS․LENSES∶∶VIEW function.
          (function)
*Internal Definitions*
        • *note clone: go to the DATA-LENS․LENSES∶∶CLONE generic
          function. (generic function)
        • *note clone: go to the DATA-LENS․LENSES∶∶CLONE COMMON-LISP∶∶T
          AROUND method. (method)
        • *note constant-: go to the DATA-LENS․LENSES∶∶CONSTANT- class.
          (class)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP generic function.
          (generic function)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          DATA-LENS․LENSES∶∶IDENTITY- method. (method)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          DATA-LENS․LENSES∶∶CONSTANT- method. (method)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          COMMON-LISP∶∶LIST method. (method)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          COMMON-LISP∶∶VECTOR method. (method)
        • *note identity-: go to the DATA-LENS․LENSES∶∶IDENTITY- class.
          (class)
        • *note make-alist-history-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-ALIST-HISTORY-LENS function. (function)
        • *note unconstant: go to the DATA-LENS․LENSES∶∶UNCONSTANT
          DATA-LENS․LENSES∶∶CONSTANT- method. (method)
        • *note unidentity: go to the DATA-LENS․LENSES∶∶UNIDENTITY
          DATA-LENS․LENSES∶∶IDENTITY- method. (method)
        • *note wrap-constant: go to the DATA-LENS․LENSES∶∶WRAP-CONSTANT
          function. (function)
        • *note wrap-identity: go to the DATA-LENS․LENSES∶∶WRAP-IDENTITY
          function. (function)


File: data-lens.info,  Node: The data-lens/lens․lisp file,  Prev: The data-lens/optics․lisp file,  Up: Lisp files

2.1.4 data-lens/lens.lisp
-------------------------

*Dependency*
     *note optics.lisp: go to the data-lens/optics․lisp file. (file)
*Parent*
     *note data-lens: go to the data-lens system. (system)
*Location*
     lens.lisp
*Exported Definitions*
        • *note <>1: go to the DATA-LENS∶∶<>1 macro. (macro)
        • *note ==: go to the DATA-LENS∶∶== function. (function)
        • *note applicable-when: go to the DATA-LENS∶∶APPLICABLE-WHEN
          function. (function)
        • *note applying: go to the DATA-LENS∶∶APPLYING macro. (macro)
        • *note combine-matching-lists: go to the
          DATA-LENS∶∶COMBINE-MATCHING-LISTS function. (function)
        • *note compress-runs: go to the DATA-LENS∶∶COMPRESS-RUNS
          function. (function)
        • *note cumsum: go to the DATA-LENS∶∶CUMSUM function. (function)
        • *note defun-ct: go to the DATA-LENS∶∶DEFUN-CT macro. (macro)
        • *note denest: go to the DATA-LENS∶∶DENEST function. (function)
        • *note derive: go to the DATA-LENS∶∶DERIVE function. (function)
        • *note element: go to the DATA-LENS∶∶ELEMENT function.
          (function)
        • *note exclude: go to the DATA-LENS∶∶EXCLUDE function.
          (function)
        • *note extract-key: go to the DATA-LENS∶∶EXTRACT-KEY generic
          function. (generic function)
        • *note extract-key: go to the DATA-LENS∶∶EXTRACT-KEY
          COMMON-LISP∶∶HASH-TABLE COMMON-LISP∶∶T method. (method)
        • *note extract-key: go to the DATA-LENS∶∶EXTRACT-KEY
          COMMON-LISP∶∶LIST COMMON-LISP∶∶T method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          generic function. (generic function)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶HASH-TABLE method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶VECTOR method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶SYMBOL method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶FUNCTION method. (method)
        • *note include: go to the DATA-LENS∶∶INCLUDE function.
          (function)
        • *note juxt: go to the DATA-LENS∶∶JUXT function. (function)
        • *note key: go to the DATA-LENS∶∶KEY function. (function)
        • *note key-transform: go to the DATA-LENS∶∶KEY-TRANSFORM
          function. (function)
        • *note let-fn: go to the DATA-LENS∶∶LET-FN macro. (macro)
        • *note maximizing: go to the DATA-LENS∶∶MAXIMIZING function.
          (function)
        • *note of-length: go to the DATA-LENS∶∶OF-LENGTH function.
          (function)
        • *note of-max-length: go to the DATA-LENS∶∶OF-MAX-LENGTH
          function. (function)
        • *note of-min-length: go to the DATA-LENS∶∶OF-MIN-LENGTH
          function. (function)
        • *note on: go to the DATA-LENS∶∶ON function. (function)
        • *note over: go to the DATA-LENS∶∶OVER function. (function)
        • *note pick: go to the DATA-LENS∶∶PICK function. (function)
        • *note regex-match: go to the DATA-LENS∶∶REGEX-MATCH function.
          (function)
        • *note shortcut: go to the DATA-LENS∶∶SHORTCUT macro. (macro)
        • *note slice: go to the DATA-LENS∶∶SLICE function. (function)
        • *note sorted: go to the DATA-LENS∶∶SORTED function. (function)
        • *note splice-elt: go to the DATA-LENS∶∶SPLICE-ELT function.
          (function)
        • *note suffixp: go to the DATA-LENS∶∶SUFFIXP function.
          (function)
        • *note transform-elt: go to the DATA-LENS∶∶TRANSFORM-ELT
          function. (function)
        • *note transform-head: go to the DATA-LENS∶∶TRANSFORM-HEAD
          function. (function)
        • *note transform-tail: go to the DATA-LENS∶∶TRANSFORM-TAIL
          function. (function)
        • *note zipping: go to the DATA-LENS∶∶ZIPPING function.
          (function)
        • *note •: go to the DATA-LENS∶∶• macro. (macro)
*Internal Definitions*
        • *note =>>: go to the DATA-LENS∶∶=>> function. (function)
        • *note cons-new: go to the DATA-LENS∶∶CONS-NEW function.
          (function)
        • *note deduplicate: go to the DATA-LENS∶∶DEDUPLICATE function.
          (function)
        • *note filler: go to the DATA-LENS∶∶FILLER function. (function)
        • *note matching-list-reducer: go to the
          DATA-LENS∶∶MATCHING-LIST-REDUCER function. (function)
        • *note update: go to the DATA-LENS∶∶UPDATE function. (function)
        • *note updatef: go to the DATA-LENS∶∶UPDATEF macro. (macro)


File: data-lens.info,  Node: Packages,  Next: Definitions,  Prev: Files,  Up: Top

3 Packages
**********

Packages are listed by definition order.

* Menu:

* The data-lens package::
* The data-lens.transducers package: The data-lens․transducers package.
* The data-lens.package package: The data-lens․package package.
* The data-lens.lenses package: The data-lens․lenses package.
* The data-lens.transducers.internals package: The data-lens․transducers․internals package.


File: data-lens.info,  Node: The data-lens package,  Next: The data-lens․transducers package,  Prev: Packages,  Up: Packages

3.1 data-lens
=============

*Source*
     *note package.lisp: go to the data-lens/package․lisp file. (file)
*Use List*
     common-lisp
*Exported Definitions*
        • *note <>1: go to the DATA-LENS∶∶<>1 macro. (macro)
        • *note ==: go to the DATA-LENS∶∶== function. (function)
        • *note applicable-when: go to the DATA-LENS∶∶APPLICABLE-WHEN
          function. (function)
        • *note applying: go to the DATA-LENS∶∶APPLYING macro. (macro)
        • *note combine-matching-lists: go to the
          DATA-LENS∶∶COMBINE-MATCHING-LISTS function. (function)
        • *note compress-runs: go to the DATA-LENS∶∶COMPRESS-RUNS
          function. (function)
        • *note cumsum: go to the DATA-LENS∶∶CUMSUM function. (function)
        • *note defun-ct: go to the DATA-LENS∶∶DEFUN-CT macro. (macro)
        • *note denest: go to the DATA-LENS∶∶DENEST function. (function)
        • *note derive: go to the DATA-LENS∶∶DERIVE function. (function)
        • *note element: go to the DATA-LENS∶∶ELEMENT function.
          (function)
        • *note exclude: go to the DATA-LENS∶∶EXCLUDE function.
          (function)
        • *note extract-key: go to the DATA-LENS∶∶EXTRACT-KEY generic
          function. (generic function)
        • *note extract-key: go to the DATA-LENS∶∶EXTRACT-KEY
          COMMON-LISP∶∶HASH-TABLE COMMON-LISP∶∶T method. (method)
        • *note extract-key: go to the DATA-LENS∶∶EXTRACT-KEY
          COMMON-LISP∶∶LIST COMMON-LISP∶∶T method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          generic function. (generic function)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶HASH-TABLE method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶VECTOR method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶SYMBOL method. (method)
        • *note functionalize: go to the DATA-LENS∶∶FUNCTIONALIZE
          COMMON-LISP∶∶FUNCTION method. (method)
        • *note include: go to the DATA-LENS∶∶INCLUDE function.
          (function)
        • *note juxt: go to the DATA-LENS∶∶JUXT function. (function)
        • *note key: go to the DATA-LENS∶∶KEY function. (function)
        • *note key-transform: go to the DATA-LENS∶∶KEY-TRANSFORM
          function. (function)
        • *note let-fn: go to the DATA-LENS∶∶LET-FN macro. (macro)
        • *note maximizing: go to the DATA-LENS∶∶MAXIMIZING function.
          (function)
        • *note of-length: go to the DATA-LENS∶∶OF-LENGTH function.
          (function)
        • *note of-max-length: go to the DATA-LENS∶∶OF-MAX-LENGTH
          function. (function)
        • *note of-min-length: go to the DATA-LENS∶∶OF-MIN-LENGTH
          function. (function)
        • *note on: go to the DATA-LENS∶∶ON function. (function)
        • *note over: go to the DATA-LENS∶∶OVER function. (function)
        • *note pick: go to the DATA-LENS∶∶PICK function. (function)
        • *note regex-match: go to the DATA-LENS∶∶REGEX-MATCH function.
          (function)
        • *note shortcut: go to the DATA-LENS∶∶SHORTCUT macro. (macro)
        • *note slice: go to the DATA-LENS∶∶SLICE function. (function)
        • *note sorted: go to the DATA-LENS∶∶SORTED function. (function)
        • *note splice-elt: go to the DATA-LENS∶∶SPLICE-ELT function.
          (function)
        • *note suffixp: go to the DATA-LENS∶∶SUFFIXP function.
          (function)
        • *note transform-elt: go to the DATA-LENS∶∶TRANSFORM-ELT
          function. (function)
        • *note transform-head: go to the DATA-LENS∶∶TRANSFORM-HEAD
          function. (function)
        • *note transform-tail: go to the DATA-LENS∶∶TRANSFORM-TAIL
          function. (function)
        • *note zipping: go to the DATA-LENS∶∶ZIPPING function.
          (function)
        • *note •: go to the DATA-LENS∶∶• macro. (macro)
*Internal Definitions*
        • *note =>>: go to the DATA-LENS∶∶=>> function. (function)
        • *note cons-new: go to the DATA-LENS∶∶CONS-NEW function.
          (function)
        • *note deduplicate: go to the DATA-LENS∶∶DEDUPLICATE function.
          (function)
        • *note filler: go to the DATA-LENS∶∶FILLER function. (function)
        • *note matching-list-reducer: go to the
          DATA-LENS∶∶MATCHING-LIST-REDUCER function. (function)
        • *note update: go to the DATA-LENS∶∶UPDATE function. (function)
        • *note updatef: go to the DATA-LENS∶∶UPDATEF macro. (macro)


File: data-lens.info,  Node: The data-lens․transducers package,  Next: The data-lens․package package,  Prev: The data-lens package,  Up: Packages

3.2 data-lens.transducers
=========================

*Source*
     *note package.lisp: go to the data-lens/package․lisp file. (file)
*Use List*
     common-lisp
*Exported Definitions*
        • *note catting: go to the DATA-LENS․TRANSDUCERS∶∶CATTING
          function. (function)
        • *note collecting: go to the DATA-LENS․TRANSDUCERS∶∶COLLECTING
          function. (function)
        • *note compressing-runs: go to the
          DATA-LENS․TRANSDUCERS∶∶COMPRESSING-RUNS function. (function)
        • *note deduping: go to the DATA-LENS․TRANSDUCERS∶∶DEDUPING
          function. (function)
        • *note dropping: go to the DATA-LENS․TRANSDUCERS∶∶DROPPING
          function. (function)
        • *note filtering: go to the DATA-LENS․TRANSDUCERS∶∶FILTERING
          function. (function)
        • *note hash-table-select: go to the
          DATA-LENS․TRANSDUCERS∶∶HASH-TABLE-SELECT function. (function)
        • *note iota: go to the DATA-LENS․TRANSDUCERS∶∶IOTA function.
          (function)
        • *note lazy-sequence: go to the
          DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE function. (function)
        • *note lazy-sequence: go to the
          DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE class. (class)
        • *note mapcatting: go to the DATA-LENS․TRANSDUCERS∶∶MAPCATTING
          function. (function)
        • *note mapping: go to the DATA-LENS․TRANSDUCERS∶∶MAPPING
          function. (function)
        • *note mv-filtering: go to the
          DATA-LENS․TRANSDUCERS∶∶MV-FILTERING function. (function)
        • *note mv-mapping: go to the DATA-LENS․TRANSDUCERS∶∶MV-MAPPING
          function. (function)
        • *note mv-selecting: go to the
          DATA-LENS․TRANSDUCERS∶∶MV-SELECTING function. (function)
        • *note repeating: go to the DATA-LENS․TRANSDUCERS∶∶REPEATING
          macro. (macro)
        • *note repeating*: go to the DATA-LENS․TRANSDUCERS∶∶REPEATING*
          function. (function)
        • *note splitting: go to the DATA-LENS․TRANSDUCERS∶∶SPLITTING
          function. (function)
        • *note taking: go to the DATA-LENS․TRANSDUCERS∶∶TAKING
          function. (function)
*Internal Definitions*
        • *note comment: go to the DATA-LENS․TRANSDUCERS∶∶COMMENT macro.
          (macro)
        • *note eduction: go to the DATA-LENS․TRANSDUCERS∶∶EDUCTION
          function. (function)
        • *note next: go to the DATA-LENS․TRANSDUCERS∶∶NEXT generic
          function. (generic function)
        • *note next: go to the DATA-LENS․TRANSDUCERS∶∶NEXT
          DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE method. (method)
        • *note seq: go to the DATA-LENS․TRANSDUCERS∶∶SEQ function.
          (function)
        • *note transducer-lambda: go to the
          DATA-LENS․TRANSDUCERS∶∶TRANSDUCER-LAMBDA macro. (macro)


File: data-lens.info,  Node: The data-lens․package package,  Next: The data-lens․lenses package,  Prev: The data-lens․transducers package,  Up: Packages

3.3 data-lens.package
=====================

*Source*
     *note package.lisp: go to the data-lens/package․lisp file. (file)
*Use List*
     common-lisp


File: data-lens.info,  Node: The data-lens․lenses package,  Next: The data-lens․transducers․internals package,  Prev: The data-lens․package package,  Up: Packages

3.4 data-lens.lenses
====================

*Source*
     *note package.lisp: go to the data-lens/package․lisp file. (file)
*Use List*
     common-lisp
*Exported Definitions*
        • *note make-alist-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-ALIST-LENS function. (function)
        • *note make-hash-table-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-HASH-TABLE-LENS function. (function)
        • *note make-list-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-LIST-LENS function. (function)
        • *note make-plist-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-PLIST-LENS function. (function)
        • *note over: go to the DATA-LENS․LENSES∶∶OVER function.
          (function)
        • *note set: go to the DATA-LENS․LENSES∶∶SET function.
          (function)
        • *note view: go to the DATA-LENS․LENSES∶∶VIEW function.
          (function)
*Internal Definitions*
        • *note clone: go to the DATA-LENS․LENSES∶∶CLONE generic
          function. (generic function)
        • *note clone: go to the DATA-LENS․LENSES∶∶CLONE COMMON-LISP∶∶T
          AROUND method. (method)
        • *note constant-: go to the DATA-LENS․LENSES∶∶CONSTANT- class.
          (class)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP generic function.
          (generic function)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          DATA-LENS․LENSES∶∶IDENTITY- method. (method)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          DATA-LENS․LENSES∶∶CONSTANT- method. (method)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          COMMON-LISP∶∶LIST method. (method)
        • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T
          COMMON-LISP∶∶VECTOR method. (method)
        • *note identity-: go to the DATA-LENS․LENSES∶∶IDENTITY- class.
          (class)
        • *note make-alist-history-lens: go to the
          DATA-LENS․LENSES∶∶MAKE-ALIST-HISTORY-LENS function. (function)
        • *note unconstant: go to the DATA-LENS․LENSES∶∶UNCONSTANT
          generic function. (generic function)
        • *note unconstant: go to the DATA-LENS․LENSES∶∶UNCONSTANT
          DATA-LENS․LENSES∶∶CONSTANT- method. (method)
        • *note unidentity: go to the DATA-LENS․LENSES∶∶UNIDENTITY
          generic function. (generic function)
        • *note unidentity: go to the DATA-LENS․LENSES∶∶UNIDENTITY
          DATA-LENS․LENSES∶∶IDENTITY- method. (method)
        • *note wrap-constant: go to the DATA-LENS․LENSES∶∶WRAP-CONSTANT
          function. (function)
        • *note wrap-identity: go to the DATA-LENS․LENSES∶∶WRAP-IDENTITY
          function. (function)


File: data-lens.info,  Node: The data-lens․transducers․internals package,  Prev: The data-lens․lenses package,  Up: Packages

3.5 data-lens.transducers.internals
===================================

*Source*
     *note package.lisp: go to the data-lens/package․lisp file. (file)
*Use List*
     common-lisp
*Exported Definitions*
        • *note exit-early: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶EXIT-EARLY function.
          (function)
        • *note init: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT
          generic function. (generic function)
        • *note init: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT
          ❨eql DATA-LENS․TRANSDUCERS∶∶LIST-BUILDER❩ method. (method)
        • *note init: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT
          ❨eql DATA-LENS․TRANSDUCERS∶∶VECTOR-BUILDER❩ method. (method)
        • *note init: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT
          ❨eql DATA-LENS․TRANSDUCERS∶∶HASH-TABLE-BUILDER❩ method.
          (method)
        • *note reduce-generic: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC generic
          function. (generic function)
        • *note reduce-generic: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC
          DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE COMMON-LISP∶∶FUNCTION
          COMMON-LISP∶∶T method. (method)
        • *note reduce-generic: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC
          COMMON-LISP∶∶SEQUENCE COMMON-LISP∶∶FUNCTION COMMON-LISP∶∶T
          method. (method)
        • *note reduce-generic: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC
          COMMON-LISP∶∶SEQUENCE COMMON-LISP∶∶SYMBOL COMMON-LISP∶∶T
          method. (method)
        • *note reduce-generic: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC COMMON-LISP∶∶T
          COMMON-LISP∶∶SYMBOL COMMON-LISP∶∶T method. (method)
        • *note reduce-generic: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC
          COMMON-LISP∶∶HASH-TABLE COMMON-LISP∶∶FUNCTION COMMON-LISP∶∶T
          method. (method)
        • *note stepper: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER generic function.
          (generic function)
        • *note stepper: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER ❨eql
          DATA-LENS․TRANSDUCERS∶∶LIST-BUILDER❩ method. (method)
        • *note stepper: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER ❨eql
          DATA-LENS․TRANSDUCERS∶∶VECTOR-BUILDER❩ method. (method)
        • *note stepper: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER ❨eql
          DATA-LENS․TRANSDUCERS∶∶HASH-TABLE-BUILDER❩ method. (method)
        • *note transduce: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶TRANSDUCE function.
          (function)
        • *note unwrap: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶UNWRAP generic function.
          (generic function)
        • *note unwrap: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶UNWRAP ❨eql
          DATA-LENS․TRANSDUCERS∶∶LIST-BUILDER❩ COMMON-LISP∶∶T method.
          (method)
        • *note unwrap: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS∶∶UNWRAP COMMON-LISP∶∶T
          COMMON-LISP∶∶T method. (method)
*Internal Definitions*
     *note defdocumentation: go to the
     DATA-LENS․TRANSDUCERS․INTERNALS∶∶DEFDOCUMENTATION macro. (macro)


File: data-lens.info,  Node: Definitions,  Next: Indexes,  Prev: Packages,  Up: Top

4 Definitions
*************

Definitions are sorted by export status, category, package, and then by
lexicographic order.

* Menu:

* Exported definitions::
* Internal definitions::


File: data-lens.info,  Node: Exported definitions,  Next: Internal definitions,  Prev: Definitions,  Up: Definitions

4.1 Exported definitions
========================

* Menu:

* Exported macros::
* Exported functions::
* Exported generic functions::
* Exported classes::


File: data-lens.info,  Node: Exported macros,  Next: Exported functions,  Prev: Exported definitions,  Up: Exported definitions

4.1.1 Macros
------------

 -- Macro: <>1 &rest FUNS
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Macro: applying FUN &rest ARGS
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Macro: defun-ct NAME (&rest ARGS) &body BODY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Macro: let-fn (&rest BINDINGS) &body BODY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Macro: repeating V
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          lazy-sequence.lisp
 -- Macro: shortcut NAME FUNCTION &body BOUND-ARGS
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Macro: • &rest FUNS
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)


File: data-lens.info,  Node: Exported functions,  Next: Exported generic functions,  Prev: Exported macros,  Up: Exported definitions

4.1.2 Functions
---------------

 -- Function: == TARGET &key TEST
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: applicable-when FUN TEST
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: catting ()
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: collecting COLLECTOR
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: combine-matching-lists &key TEST &allow-other-keys
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: compress-runs &key COLLECTOR TEST KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: compressing-runs &key TEST COMBINER
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: cumsum &key ADD-FUN KEY COMBINE ZERO
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: deduping &optional TEST
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: denest &key RESULT-TYPE
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: derive DIFF-FUN &key KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: dropping N
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: element NUM
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: exclude PRED
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: exit-early ACC
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
 -- Function: filtering FUNCTION &rest ARGS
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: hash-table-select HASH-TABLE
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: include PRED
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: iota &key START STEP COUNT
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          lazy-sequence.lisp
 -- Function: juxt FUN1 &rest R
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: key KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: key-transform FUN KEY-GET KEY-SET
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: lazy-sequence NEXT
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          lazy-sequence.lisp
 -- Function: make-alist-lens KEY
     A lens for updating a alist, discarding previous values
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: make-hash-table-lens KEY
     A lens for updating a hash-table, discarding previous values
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: make-list-lens INDEX
     A lens for updating a sequence
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: make-plist-lens KEY
     A lens for updating a plist, preserving previous values
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: mapcatting FUN
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: mapping FUNCTION &rest ARGS
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: maximizing RELATION MEASURE
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: mv-filtering FUNCTION &rest ARGS
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: mv-mapping FUNCTION &rest ARGS
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: mv-selecting FUNCTION &rest ARGS
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: of-length LEN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: of-max-length LEN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: of-min-length LEN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: on FUN KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: over FUN &key RESULT-TYPE
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: over LENS CB REC
     Given a lens, a callback and a record, apply the lens to the
     record, transform it by the callback and return copy of the record,
     updated to contain the result of the callback.  This is the
     fundamental operation on a lens and SET and VIEW are implemented in
     terms of it.

     A lens is any function of the form (lambda (fun) (lambda (rec)
     ...))  that obeys the lens laws (where == is some reasonable
     equality operator):

     (== (view lens (set lens value rec))
     value)

     (== (set lens (view lens rec) rec)
     rec)

     (== (set lens value2 (set lens value1 rec))
     (set lens value2 rec))

     The inner lambda returns a functor that determines the policy to be
     applied to the focused part.  By default, this only uses IDENTITY-
     and CONSTANT- in order to implement the lens operations over, set
     and view.

     If these conditions are met, (over (data-lens:<>1 lens1 lens2) ...)
     is equivalent to using lens2 to focus the part lens1 focuses: note
     that composition is "backwards" from what one might expect: this is
     because composition composes the wrapper lambdas and applies the
     lambda that actually pulls a value out of a record later.
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: pick SELECTOR
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: regex-match REGEX
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: repeating* V &key COUNT
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          lazy-sequence.lisp
 -- Function: set LENS V REC
     Given a lens, a value and a rec, immutably update the rec to
     contain the new value at the location focused by the lens.
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: slice START &optional END
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: sorted COMPARATOR &rest R &key KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: splice-elt ELT FUN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: splitting &rest FUNCTIONS
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: suffixp SUFFIX &key TEST
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: taking N
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: transduce XF BUILD SEQ
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
 -- Function: transform-elt ELT FUN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: transform-head FUN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: transform-tail FUN
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: view LENS REC
     Given a lens and a rec, return the focused value
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: zipping RESULT-TYPE &key FILL-VALUE
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)


File: data-lens.info,  Node: Exported generic functions,  Next: Exported classes,  Prev: Exported functions,  Up: Exported definitions

4.1.3 Generic functions
-----------------------

 -- Generic Function: extract-key MAP KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
     *Methods*
           -- Method: extract-key (MAP hash-table) KEY
           -- Method: extract-key (MAP list) KEY
 -- Generic Function: functionalize IT
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
     *Methods*
           -- Method: functionalize (IT hash-table)
           -- Method: functionalize (IT vector)
           -- Method: functionalize (IT symbol)
           -- Method: functionalize (IT function)
 -- Generic Function: init CLIENT
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
     *Methods*
           -- Method: init (IT (eql list-builder))
               *Source*
                    transducers.lisp
           -- Method: init (IT (eql vector-builder))
               *Source*
                    transducers.lisp
           -- Method: init (IT (eql hash-table-builder))
               *Source*
                    transducers.lisp
 -- Generic Function: reduce-generic SEQ FUNC INIT
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
     *Methods*
           -- Method: reduce-generic (SEQ lazy-sequence) (FUNC function)
                    INIT
               *Source*
                    lazy-sequence.lisp
           -- Method: reduce-generic (SEQ sequence) (FUNC function) INIT
           -- Method: reduce-generic (SEQ sequence) (FUNC symbol) INIT
           -- Method: reduce-generic SEQ (FUNC symbol) INIT
           -- Method: reduce-generic (SEQ hash-table) (FUNC function)
                    INIT
 -- Generic Function: stepper CLIENT
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
     *Methods*
           -- Method: stepper (IT (eql list-builder))
               *Source*
                    transducers.lisp
           -- Method: stepper (IT (eql vector-builder))
               *Source*
                    transducers.lisp
           -- Method: stepper (IT (eql hash-table-builder))
               *Source*
                    transducers.lisp
 -- Generic Function: unwrap CLIENT OBJ
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
     *Methods*
           -- Method: unwrap (IT (eql list-builder)) OBJ
               *Source*
                    transducers.lisp
           -- Method: unwrap CLIENT OBJ


File: data-lens.info,  Node: Exported classes,  Prev: Exported generic functions,  Up: Exported definitions

4.1.4 Classes
-------------

 -- Class: lazy-sequence ()
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          lazy-sequence.lisp
     *Direct superclasses*
          standard-object (class)
     *Direct methods*
             • *note reduce-generic: go to the
               DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC
               DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE
               COMMON-LISP∶∶FUNCTION COMMON-LISP∶∶T method. (method)
             • *note next: go to the DATA-LENS․TRANSDUCERS∶∶NEXT
               DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE method. (method)
     *Direct slots*
           -- Slot: %next
               *Initargs*
                    :next
               *Readers*
                    *note next: go to the DATA-LENS․TRANSDUCERS∶∶NEXT
                    generic function. (generic function)


File: data-lens.info,  Node: Internal definitions,  Prev: Exported definitions,  Up: Definitions

4.2 Internal definitions
========================

* Menu:

* Internal macros::
* Internal functions::
* Internal generic functions::
* Internal classes::


File: data-lens.info,  Node: Internal macros,  Next: Internal functions,  Prev: Internal definitions,  Up: Internal definitions

4.2.1 Macros
------------

 -- Macro: comment &body BODY
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Macro: defdocumentation NAME &body DOC-SPECS
     *Package*
          *note data-lens.transducers.internals: go to the
          DATA-LENS․TRANSDUCERS․INTERNALS package.
     *Source*
          transducer-protocol.lisp
 -- Macro: transducer-lambda &body ((TWO-ARG-ACC TWO-ARG-NEXT) &body
          TWO-ARG-BODY)
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Macro: updatef PLACE FUN &rest ARGS
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)


File: data-lens.info,  Node: Internal functions,  Next: Internal generic functions,  Prev: Internal macros,  Up: Internal definitions

4.2.2 Functions
---------------

 -- Function: =>> FUN1 FUN2
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: cons-new &key TEST KEY
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: deduplicate &optional TEST
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: eduction XF SEQ
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: filler LENGTH1 LENGTH2 FILL-VALUE
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: make-alist-history-lens KEY
     A lens for updating a alist, preserving previous values
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: matching-list-reducer TEST ACC NEXT
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: seq A B
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Source*
          transducers.lisp
 -- Function: update THING FUN &rest ARGS
     *Package*
          *note data-lens: go to the DATA-LENS package.
     *Source*
          *note lens.lisp: go to the data-lens/lens․lisp file. (file)
 -- Function: wrap-constant V
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
 -- Function: wrap-identity V
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)


File: data-lens.info,  Node: Internal generic functions,  Next: Internal classes,  Prev: Internal functions,  Up: Internal definitions

4.2.3 Generic functions
-----------------------

 -- Generic Function: clone OBJ &rest NEW-INITARGS &key
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
     *Methods*
           -- Method: clone OBJ &rest NEW-INITARGS &key around
 -- Generic Function: fmap FUNCTION DATA
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
     *Methods*
           -- Method: fmap FUNCTION (DATA identity-)
           -- Method: fmap FUNCTION (DATA constant-)
           -- Method: fmap FUNCTION (DATA list)
           -- Method: fmap FUNCTION (DATA vector)
 -- Generic Function: next OBJECT
     *Package*
          *note data-lens.transducers: go to the DATA-LENS․TRANSDUCERS
          package.
     *Methods*
           -- Method: next (LAZY-SEQUENCE lazy-sequence)
               automatically generated reader method
               *Source*
                    lazy-sequence.lisp
 -- Generic Function: unconstant OBJECT
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Methods*
           -- Method: unconstant (CONSTANT- constant-)
               automatically generated reader method
               *Source*
                    *note optics.lisp: go to the data-lens/optics․lisp
                    file. (file)
 -- Generic Function: unidentity OBJECT
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Methods*
           -- Method: unidentity (IDENTITY- identity-)
               automatically generated reader method
               *Source*
                    *note optics.lisp: go to the data-lens/optics․lisp
                    file. (file)


File: data-lens.info,  Node: Internal classes,  Prev: Internal generic functions,  Up: Internal definitions

4.2.4 Classes
-------------

 -- Class: constant- ()
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
     *Direct superclasses*
          standard-object (class)
     *Direct methods*
             • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP
               COMMON-LISP∶∶T DATA-LENS․LENSES∶∶CONSTANT- method.
               (method)
             • print-object (method)
             • *note unconstant: go to the DATA-LENS․LENSES∶∶UNCONSTANT
               DATA-LENS․LENSES∶∶CONSTANT- method. (method)
     *Direct slots*
           -- Slot: %v
               *Initargs*
                    :value
               *Readers*
                    *note unconstant: go to the
                    DATA-LENS․LENSES∶∶UNCONSTANT generic function.
                    (generic function)
 -- Class: identity- ()
     *Package*
          *note data-lens.lenses: go to the DATA-LENS․LENSES package.
     *Source*
          *note optics.lisp: go to the data-lens/optics․lisp file.
          (file)
     *Direct superclasses*
          standard-object (class)
     *Direct methods*
             • *note fmap: go to the DATA-LENS․LENSES∶∶FMAP
               COMMON-LISP∶∶T DATA-LENS․LENSES∶∶IDENTITY- method.
               (method)
             • print-object (method)
             • *note unidentity: go to the DATA-LENS․LENSES∶∶UNIDENTITY
               DATA-LENS․LENSES∶∶IDENTITY- method. (method)
     *Direct slots*
           -- Slot: %v
               *Initargs*
                    :value
               *Readers*
                    *note unidentity: go to the
                    DATA-LENS․LENSES∶∶UNIDENTITY generic function.
                    (generic function)


File: data-lens.info,  Node: Indexes,  Prev: Definitions,  Up: Top

Appendix A Indexes
******************

* Menu:

* Concept index::
* Function index::
* Variable index::
* Data type index::


File: data-lens.info,  Node: Concept index,  Next: Function index,  Prev: Indexes,  Up: Indexes

A.1 Concepts
============

 [index ]
* Menu:

* data-lens.asd:                         The data-lens․asd file.
                                                                (line 6)
* data-lens/lens.lisp:                   The data-lens/lens․lisp file.
                                                                (line 6)
* data-lens/optics.lisp:                 The data-lens/optics․lisp file.
                                                                (line 6)
* data-lens/package.lisp:                The data-lens/package․lisp file.
                                                                (line 6)
* File, Lisp, data-lens.asd:             The data-lens․asd file.
                                                                (line 6)
* File, Lisp, data-lens/lens.lisp:       The data-lens/lens․lisp file.
                                                                (line 6)
* File, Lisp, data-lens/optics.lisp:     The data-lens/optics․lisp file.
                                                                (line 6)
* File, Lisp, data-lens/package.lisp:    The data-lens/package․lisp file.
                                                                (line 6)
* Lisp File, data-lens.asd:              The data-lens․asd file.
                                                                (line 6)
* Lisp File, data-lens/lens.lisp:        The data-lens/lens․lisp file.
                                                                (line 6)
* Lisp File, data-lens/optics.lisp:      The data-lens/optics․lisp file.
                                                                (line 6)
* Lisp File, data-lens/package.lisp:     The data-lens/package․lisp file.
                                                                (line 6)


File: data-lens.info,  Node: Function index,  Next: Variable index,  Prev: Concept index,  Up: Indexes

A.2 Functions
=============

 [index ]
* Menu:

* <>1:                                   Exported macros.     (line   6)
* ==:                                    Exported functions.  (line   6)
* =>>:                                   Internal functions.  (line   6)
* •:                                     Exported macros.     (line  37)
* applicable-when:                       Exported functions.  (line  11)
* applying:                              Exported macros.     (line  11)
* catting:                               Exported functions.  (line  16)
* clone:                                 Internal generic functions.
                                                              (line   6)
* clone <1>:                             Internal generic functions.
                                                              (line  13)
* collecting:                            Exported functions.  (line  22)
* combine-matching-lists:                Exported functions.  (line  28)
* comment:                               Internal macros.     (line   6)
* compress-runs:                         Exported functions.  (line  33)
* compressing-runs:                      Exported functions.  (line  38)
* cons-new:                              Internal functions.  (line  11)
* cumsum:                                Exported functions.  (line  44)
* deduping:                              Exported functions.  (line  49)
* deduplicate:                           Internal functions.  (line  16)
* defdocumentation:                      Internal macros.     (line  12)
* defun-ct:                              Exported macros.     (line  16)
* denest:                                Exported functions.  (line  55)
* derive:                                Exported functions.  (line  60)
* dropping:                              Exported functions.  (line  65)
* eduction:                              Internal functions.  (line  21)
* element:                               Exported functions.  (line  71)
* exclude:                               Exported functions.  (line  76)
* exit-early:                            Exported functions.  (line  81)
* extract-key:                           Exported generic functions.
                                                              (line   6)
* extract-key <1>:                       Exported generic functions.
                                                              (line  12)
* extract-key <2>:                       Exported generic functions.
                                                              (line  13)
* filler:                                Internal functions.  (line  27)
* filtering:                             Exported functions.  (line  87)
* fmap:                                  Internal generic functions.
                                                              (line  14)
* fmap <1>:                              Internal generic functions.
                                                              (line  21)
* fmap <2>:                              Internal generic functions.
                                                              (line  22)
* fmap <3>:                              Internal generic functions.
                                                              (line  23)
* fmap <4>:                              Internal generic functions.
                                                              (line  24)
* Function, ==:                          Exported functions.  (line   7)
* Function, =>>:                         Internal functions.  (line   7)
* Function, applicable-when:             Exported functions.  (line  12)
* Function, catting:                     Exported functions.  (line  17)
* Function, collecting:                  Exported functions.  (line  23)
* Function, combine-matching-lists:      Exported functions.  (line  29)
* Function, compress-runs:               Exported functions.  (line  34)
* Function, compressing-runs:            Exported functions.  (line  39)
* Function, cons-new:                    Internal functions.  (line  12)
* Function, cumsum:                      Exported functions.  (line  45)
* Function, deduping:                    Exported functions.  (line  50)
* Function, deduplicate:                 Internal functions.  (line  17)
* Function, denest:                      Exported functions.  (line  56)
* Function, derive:                      Exported functions.  (line  61)
* Function, dropping:                    Exported functions.  (line  66)
* Function, eduction:                    Internal functions.  (line  22)
* Function, element:                     Exported functions.  (line  72)
* Function, exclude:                     Exported functions.  (line  77)
* Function, exit-early:                  Exported functions.  (line  82)
* Function, filler:                      Internal functions.  (line  28)
* Function, filtering:                   Exported functions.  (line  88)
* Function, hash-table-select:           Exported functions.  (line  94)
* Function, include:                     Exported functions.  (line 100)
* Function, iota:                        Exported functions.  (line 105)
* Function, juxt:                        Exported functions.  (line 111)
* Function, key:                         Exported functions.  (line 116)
* Function, key-transform:               Exported functions.  (line 121)
* Function, lazy-sequence:               Exported functions.  (line 126)
* Function, make-alist-history-lens:     Internal functions.  (line  33)
* Function, make-alist-lens:             Exported functions.  (line 132)
* Function, make-hash-table-lens:        Exported functions.  (line 139)
* Function, make-list-lens:              Exported functions.  (line 146)
* Function, make-plist-lens:             Exported functions.  (line 153)
* Function, mapcatting:                  Exported functions.  (line 160)
* Function, mapping:                     Exported functions.  (line 166)
* Function, matching-list-reducer:       Internal functions.  (line  40)
* Function, maximizing:                  Exported functions.  (line 172)
* Function, mv-filtering:                Exported functions.  (line 177)
* Function, mv-mapping:                  Exported functions.  (line 183)
* Function, mv-selecting:                Exported functions.  (line 189)
* Function, of-length:                   Exported functions.  (line 195)
* Function, of-max-length:               Exported functions.  (line 200)
* Function, of-min-length:               Exported functions.  (line 205)
* Function, on:                          Exported functions.  (line 210)
* Function, over:                        Exported functions.  (line 215)
* Function, over <1>:                    Exported functions.  (line 220)
* Function, pick:                        Exported functions.  (line 255)
* Function, regex-match:                 Exported functions.  (line 260)
* Function, repeating*:                  Exported functions.  (line 265)
* Function, seq:                         Internal functions.  (line  45)
* Function, set:                         Exported functions.  (line 271)
* Function, slice:                       Exported functions.  (line 279)
* Function, sorted:                      Exported functions.  (line 284)
* Function, splice-elt:                  Exported functions.  (line 289)
* Function, splitting:                   Exported functions.  (line 294)
* Function, suffixp:                     Exported functions.  (line 300)
* Function, taking:                      Exported functions.  (line 305)
* Function, transduce:                   Exported functions.  (line 311)
* Function, transform-elt:               Exported functions.  (line 317)
* Function, transform-head:              Exported functions.  (line 322)
* Function, transform-tail:              Exported functions.  (line 327)
* Function, update:                      Internal functions.  (line  51)
* Function, view:                        Exported functions.  (line 332)
* Function, wrap-constant:               Internal functions.  (line  56)
* Function, wrap-identity:               Internal functions.  (line  62)
* Function, zipping:                     Exported functions.  (line 339)
* functionalize:                         Exported generic functions.
                                                              (line  14)
* functionalize <1>:                     Exported generic functions.
                                                              (line  20)
* functionalize <2>:                     Exported generic functions.
                                                              (line  21)
* functionalize <3>:                     Exported generic functions.
                                                              (line  22)
* functionalize <4>:                     Exported generic functions.
                                                              (line  23)
* Generic Function, clone:               Internal generic functions.
                                                              (line   7)
* Generic Function, extract-key:         Exported generic functions.
                                                              (line   7)
* Generic Function, fmap:                Internal generic functions.
                                                              (line  15)
* Generic Function, functionalize:       Exported generic functions.
                                                              (line  15)
* Generic Function, init:                Exported generic functions.
                                                              (line  25)
* Generic Function, next:                Internal generic functions.
                                                              (line  26)
* Generic Function, reduce-generic:      Exported generic functions.
                                                              (line  41)
* Generic Function, stepper:             Exported generic functions.
                                                              (line  57)
* Generic Function, unconstant:          Internal generic functions.
                                                              (line  35)
* Generic Function, unidentity:          Internal generic functions.
                                                              (line  44)
* Generic Function, unwrap:              Exported generic functions.
                                                              (line  73)
* hash-table-select:                     Exported functions.  (line  93)
* include:                               Exported functions.  (line  99)
* init:                                  Exported generic functions.
                                                              (line  24)
* init <1>:                              Exported generic functions.
                                                              (line  31)
* init <2>:                              Exported generic functions.
                                                              (line  34)
* init <3>:                              Exported generic functions.
                                                              (line  37)
* iota:                                  Exported functions.  (line 104)
* juxt:                                  Exported functions.  (line 110)
* key:                                   Exported functions.  (line 115)
* key-transform:                         Exported functions.  (line 120)
* lazy-sequence:                         Exported functions.  (line 125)
* let-fn:                                Exported macros.     (line  21)
* Macro, <>1:                            Exported macros.     (line   7)
* Macro, applying:                       Exported macros.     (line  12)
* Macro, comment:                        Internal macros.     (line   7)
* Macro, defdocumentation:               Internal macros.     (line  13)
* Macro, defun-ct:                       Exported macros.     (line  17)
* Macro, let-fn:                         Exported macros.     (line  22)
* Macro, repeating:                      Exported macros.     (line  27)
* Macro, shortcut:                       Exported macros.     (line  33)
* Macro, transducer-lambda:              Internal macros.     (line  20)
* Macro, updatef:                        Internal macros.     (line  26)
* Macro, •:                              Exported macros.     (line  38)
* make-alist-history-lens:               Internal functions.  (line  32)
* make-alist-lens:                       Exported functions.  (line 131)
* make-hash-table-lens:                  Exported functions.  (line 138)
* make-list-lens:                        Exported functions.  (line 145)
* make-plist-lens:                       Exported functions.  (line 152)
* mapcatting:                            Exported functions.  (line 159)
* mapping:                               Exported functions.  (line 165)
* matching-list-reducer:                 Internal functions.  (line  39)
* maximizing:                            Exported functions.  (line 171)
* Method, clone:                         Internal generic functions.
                                                              (line  14)
* Method, extract-key:                   Exported generic functions.
                                                              (line  13)
* Method, extract-key <1>:               Exported generic functions.
                                                              (line  14)
* Method, fmap:                          Internal generic functions.
                                                              (line  22)
* Method, fmap <1>:                      Internal generic functions.
                                                              (line  23)
* Method, fmap <2>:                      Internal generic functions.
                                                              (line  24)
* Method, fmap <3>:                      Internal generic functions.
                                                              (line  25)
* Method, functionalize:                 Exported generic functions.
                                                              (line  21)
* Method, functionalize <1>:             Exported generic functions.
                                                              (line  22)
* Method, functionalize <2>:             Exported generic functions.
                                                              (line  23)
* Method, functionalize <3>:             Exported generic functions.
                                                              (line  24)
* Method, init:                          Exported generic functions.
                                                              (line  32)
* Method, init <1>:                      Exported generic functions.
                                                              (line  35)
* Method, init <2>:                      Exported generic functions.
                                                              (line  38)
* Method, next:                          Internal generic functions.
                                                              (line  31)
* Method, reduce-generic:                Exported generic functions.
                                                              (line  49)
* Method, reduce-generic <1>:            Exported generic functions.
                                                              (line  52)
* Method, reduce-generic <2>:            Exported generic functions.
                                                              (line  53)
* Method, reduce-generic <3>:            Exported generic functions.
                                                              (line  54)
* Method, reduce-generic <4>:            Exported generic functions.
                                                              (line  56)
* Method, stepper:                       Exported generic functions.
                                                              (line  64)
* Method, stepper <1>:                   Exported generic functions.
                                                              (line  67)
* Method, stepper <2>:                   Exported generic functions.
                                                              (line  70)
* Method, unconstant:                    Internal generic functions.
                                                              (line  39)
* Method, unidentity:                    Internal generic functions.
                                                              (line  48)
* Method, unwrap:                        Exported generic functions.
                                                              (line  80)
* Method, unwrap <1>:                    Exported generic functions.
                                                              (line  83)
* mv-filtering:                          Exported functions.  (line 176)
* mv-mapping:                            Exported functions.  (line 182)
* mv-selecting:                          Exported functions.  (line 188)
* next:                                  Internal generic functions.
                                                              (line  25)
* next <1>:                              Internal generic functions.
                                                              (line  30)
* of-length:                             Exported functions.  (line 194)
* of-max-length:                         Exported functions.  (line 199)
* of-min-length:                         Exported functions.  (line 204)
* on:                                    Exported functions.  (line 209)
* over:                                  Exported functions.  (line 214)
* over <1>:                              Exported functions.  (line 219)
* pick:                                  Exported functions.  (line 254)
* reduce-generic:                        Exported generic functions.
                                                              (line  40)
* reduce-generic <1>:                    Exported generic functions.
                                                              (line  47)
* reduce-generic <2>:                    Exported generic functions.
                                                              (line  51)
* reduce-generic <3>:                    Exported generic functions.
                                                              (line  52)
* reduce-generic <4>:                    Exported generic functions.
                                                              (line  53)
* reduce-generic <5>:                    Exported generic functions.
                                                              (line  54)
* regex-match:                           Exported functions.  (line 259)
* repeating:                             Exported macros.     (line  26)
* repeating*:                            Exported functions.  (line 264)
* seq:                                   Internal functions.  (line  44)
* set:                                   Exported functions.  (line 270)
* shortcut:                              Exported macros.     (line  32)
* slice:                                 Exported functions.  (line 278)
* sorted:                                Exported functions.  (line 283)
* splice-elt:                            Exported functions.  (line 288)
* splitting:                             Exported functions.  (line 293)
* stepper:                               Exported generic functions.
                                                              (line  56)
* stepper <1>:                           Exported generic functions.
                                                              (line  63)
* stepper <2>:                           Exported generic functions.
                                                              (line  66)
* stepper <3>:                           Exported generic functions.
                                                              (line  69)
* suffixp:                               Exported functions.  (line 299)
* taking:                                Exported functions.  (line 304)
* transduce:                             Exported functions.  (line 310)
* transducer-lambda:                     Internal macros.     (line  18)
* transform-elt:                         Exported functions.  (line 316)
* transform-head:                        Exported functions.  (line 321)
* transform-tail:                        Exported functions.  (line 326)
* unconstant:                            Internal generic functions.
                                                              (line  34)
* unconstant <1>:                        Internal generic functions.
                                                              (line  38)
* unidentity:                            Internal generic functions.
                                                              (line  43)
* unidentity <1>:                        Internal generic functions.
                                                              (line  47)
* unwrap:                                Exported generic functions.
                                                              (line  72)
* unwrap <1>:                            Exported generic functions.
                                                              (line  79)
* unwrap <2>:                            Exported generic functions.
                                                              (line  82)
* update:                                Internal functions.  (line  50)
* updatef:                               Internal macros.     (line  25)
* view:                                  Exported functions.  (line 331)
* wrap-constant:                         Internal functions.  (line  55)
* wrap-identity:                         Internal functions.  (line  61)
* zipping:                               Exported functions.  (line 338)


File: data-lens.info,  Node: Variable index,  Next: Data type index,  Prev: Function index,  Up: Indexes

A.3 Variables
=============

 [index ]
* Menu:

* %next:                                 Exported classes.     (line 22)
* %v:                                    Internal classes.     (line 22)
* %v <1>:                                Internal classes.     (line 45)
* Slot, %next:                           Exported classes.     (line 23)
* Slot, %v:                              Internal classes.     (line 23)
* Slot, %v <1>:                          Internal classes.     (line 46)


File: data-lens.info,  Node: Data type index,  Prev: Variable index,  Up: Indexes

A.4 Data types
==============

 [index ]
* Menu:

* Class, constant-:                      Internal classes.     (line  7)
* Class, identity-:                      Internal classes.     (line 30)
* Class, lazy-sequence:                  Exported classes.     (line  7)
* constant-:                             Internal classes.     (line  6)
* data-lens:                             The data-lens system. (line  6)
* data-lens <1>:                         The data-lens package.
                                                               (line  6)
* data-lens.lenses:                      The data-lens․lenses package.
                                                               (line  6)
* data-lens.package:                     The data-lens․package package.
                                                               (line  6)
* data-lens.transducers:                 The data-lens․transducers package.
                                                               (line  6)
* data-lens.transducers.internals:       The data-lens․transducers․internals package.
                                                               (line  6)
* identity-:                             Internal classes.     (line 29)
* lazy-sequence:                         Exported classes.     (line  6)
* Package, data-lens:                    The data-lens package.
                                                               (line  6)
* Package, data-lens.lenses:             The data-lens․lenses package.
                                                               (line  6)
* Package, data-lens.package:            The data-lens․package package.
                                                               (line  6)
* Package, data-lens.transducers:        The data-lens․transducers package.
                                                               (line  6)
* Package, data-lens.transducers.internals: The data-lens․transducers․internals package.
                                                               (line  6)
* System, data-lens:                     The data-lens system. (line  6)



Tag Table:
Node: Top217
Node: Systems720
Node: The data-lens system922
Ref: go to the data-lens system1034
Node: Files1654
Node: Lisp files1866
Node: The data-lens․asd file2218
Ref: go to the data-lens․asd file2394
Node: The data-lens/package․lisp file2494
Ref: go to the data-lens/package․lisp file2710
Node: The data-lens/optics․lisp file3237
Ref: go to the data-lens/optics․lisp file3457
Node: The data-lens/lens․lisp file6152
Ref: go to the data-lens/lens․lisp file6326
Node: Packages11245
Node: The data-lens package11731
Ref: go to the DATA-LENS package11890
Node: The data-lens․transducers package16741
Ref: go to the DATA-LENS․TRANSDUCERS package16947
Node: The data-lens․package package19876
Ref: go to the DATA-LENS․PACKAGE package20083
Node: The data-lens․lenses package20194
Ref: go to the DATA-LENS․LENSES package20411
Node: The data-lens․transducers․internals package23278
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS package23485
Node: Definitions27068
Node: Exported definitions27338
Node: Exported macros27614
Ref: go to the DATA-LENS∶∶<>1 macro27798
Ref: go to the DATA-LENS∶∶APPLYING macro27990
Ref: go to the DATA-LENS∶∶DEFUN-CT macro28196
Ref: go to the DATA-LENS∶∶LET-FN macro28399
Ref: go to the DATA-LENS․TRANSDUCERS∶∶REPEATING macro28579
Ref: go to the DATA-LENS∶∶SHORTCUT macro28780
Ref: go to the DATA-LENS∶∶• macro28963
Node: Exported functions29121
Ref: go to the DATA-LENS∶∶== function29325
Ref: go to the DATA-LENS∶∶APPLICABLE-WHEN function29521
Ref: go to the DATA-LENS․TRANSDUCERS∶∶CATTING function29703
Ref: go to the DATA-LENS․TRANSDUCERS∶∶COLLECTING function29886
Ref: go to the DATA-LENS∶∶COMBINE-MATCHING-LISTS function30099
Ref: go to the DATA-LENS∶∶COMPRESS-RUNS function30308
Ref: go to the DATA-LENS․TRANSDUCERS∶∶COMPRESSING-RUNS function30515
Ref: go to the DATA-LENS∶∶CUMSUM function30714
Ref: go to the DATA-LENS․TRANSDUCERS∶∶DEDUPING function30909
Ref: go to the DATA-LENS∶∶DENEST function31095
Ref: go to the DATA-LENS∶∶DERIVE function31291
Ref: go to the DATA-LENS․TRANSDUCERS∶∶DROPPING function31473
Ref: go to the DATA-LENS∶∶ELEMENT function31647
Ref: go to the DATA-LENS∶∶EXCLUDE function31831
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶EXIT-EARLY function32017
Ref: go to the DATA-LENS․TRANSDUCERS∶∶FILTERING function32239
Ref: go to the DATA-LENS․TRANSDUCERS∶∶HASH-TABLE-SELECT function32430
Ref: go to the DATA-LENS∶∶INCLUDE function32605
Ref: go to the DATA-LENS․TRANSDUCERS∶∶IOTA function32803
Ref: go to the DATA-LENS∶∶JUXT function32985
Ref: go to the DATA-LENS∶∶KEY function33164
Ref: go to the DATA-LENS∶∶KEY-TRANSFORM function33369
Ref: go to the DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE function33559
Ref: go to the DATA-LENS․LENSES∶∶MAKE-ALIST-LENS function33743
Ref: go to the DATA-LENS․LENSES∶∶MAKE-HASH-TABLE-LENS function34030
Ref: go to the DATA-LENS․LENSES∶∶MAKE-LIST-LENS function34318
Ref: go to the DATA-LENS․LENSES∶∶MAKE-PLIST-LENS function34575
Ref: go to the DATA-LENS․TRANSDUCERS∶∶MAPCATTING function34852
Ref: go to the DATA-LENS․TRANSDUCERS∶∶MAPPING function35042
Ref: go to the DATA-LENS∶∶MAXIMIZING function35232
Ref: go to the DATA-LENS․TRANSDUCERS∶∶MV-FILTERING function35436
Ref: go to the DATA-LENS․TRANSDUCERS∶∶MV-MAPPING function35629
Ref: go to the DATA-LENS․TRANSDUCERS∶∶MV-SELECTING function35824
Ref: go to the DATA-LENS∶∶OF-LENGTH function36000
Ref: go to the DATA-LENS∶∶OF-MAX-LENGTH function36189
Ref: go to the DATA-LENS∶∶OF-MIN-LENGTH function36378
Ref: go to the DATA-LENS∶∶ON function36560
Ref: go to the DATA-LENS∶∶OVER function36757
Ref: go to the DATA-LENS․LENSES∶∶OVER function36945
Ref: go to the DATA-LENS∶∶PICK function38383
Ref: go to the DATA-LENS∶∶REGEX-MATCH function38572
Ref: go to the DATA-LENS․TRANSDUCERS∶∶REPEATING* function38767
Ref: go to the DATA-LENS․LENSES∶∶SET function38946
Ref: go to the DATA-LENS∶∶SLICE function39303
Ref: go to the DATA-LENS∶∶SORTED function39509
Ref: go to the DATA-LENS∶∶SPLICE-ELT function39699
Ref: go to the DATA-LENS․TRANSDUCERS∶∶SPLITTING function39896
Ref: go to the DATA-LENS∶∶SUFFIXP function40083
Ref: go to the DATA-LENS․TRANSDUCERS∶∶TAKING function40263
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶TRANSDUCE function40448
Ref: go to the DATA-LENS∶∶TRANSFORM-ELT function40662
Ref: go to the DATA-LENS∶∶TRANSFORM-HEAD function40852
Ref: go to the DATA-LENS∶∶TRANSFORM-TAIL function41042
Ref: go to the DATA-LENS․LENSES∶∶VIEW function41227
Ref: go to the DATA-LENS∶∶ZIPPING function41518
Node: Exported generic functions41676
Ref: go to the DATA-LENS∶∶EXTRACT-KEY generic function41905
Ref: go to the DATA-LENS∶∶EXTRACT-KEY COMMON-LISP∶∶HASH-TABLE COMMON-LISP∶∶T method42132
Ref: go to the DATA-LENS∶∶EXTRACT-KEY COMMON-LISP∶∶LIST COMMON-LISP∶∶T method42181
Ref: go to the DATA-LENS∶∶FUNCTIONALIZE generic function42220
Ref: go to the DATA-LENS∶∶FUNCTIONALIZE COMMON-LISP∶∶HASH-TABLE method42444
Ref: go to the DATA-LENS∶∶FUNCTIONALIZE COMMON-LISP∶∶VECTOR method42492
Ref: go to the DATA-LENS∶∶FUNCTIONALIZE COMMON-LISP∶∶SYMBOL method42540
Ref: go to the DATA-LENS∶∶FUNCTIONALIZE COMMON-LISP∶∶FUNCTION method42590
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT generic function42624
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT ❨eql DATA-LENS․TRANSDUCERS∶∶LIST-BUILDER❩ method42868
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT ❨eql DATA-LENS․TRANSDUCERS∶∶VECTOR-BUILDER❩ method42982
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶INIT ❨eql DATA-LENS․TRANSDUCERS∶∶HASH-TABLE-BUILDER❩ method43100
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC generic function43212
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE COMMON-LISP∶∶FUNCTION COMMON-LISP∶∶T method43503
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC COMMON-LISP∶∶SEQUENCE COMMON-LISP∶∶FUNCTION COMMON-LISP∶∶T method43639
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC COMMON-LISP∶∶SEQUENCE COMMON-LISP∶∶SYMBOL COMMON-LISP∶∶T method43710
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC COMMON-LISP∶∶T COMMON-LISP∶∶SYMBOL COMMON-LISP∶∶T method43770
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶REDUCE-GENERIC COMMON-LISP∶∶HASH-TABLE COMMON-LISP∶∶FUNCTION COMMON-LISP∶∶T method43865
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER generic function43902
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER ❨eql DATA-LENS․TRANSDUCERS∶∶LIST-BUILDER❩ method44149
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER ❨eql DATA-LENS․TRANSDUCERS∶∶VECTOR-BUILDER❩ method44266
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶STEPPER ❨eql DATA-LENS․TRANSDUCERS∶∶HASH-TABLE-BUILDER❩ method44387
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶UNWRAP generic function44488
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶UNWRAP ❨eql DATA-LENS․TRANSDUCERS∶∶LIST-BUILDER❩ COMMON-LISP∶∶T method44738
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶UNWRAP COMMON-LISP∶∶T COMMON-LISP∶∶T method44839
Node: Exported classes44840
Ref: go to the DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE class45008
Node: Internal definitions45901
Node: Internal macros46157
Ref: go to the DATA-LENS․TRANSDUCERS∶∶COMMENT macro46345
Ref: go to the DATA-LENS․TRANSDUCERS․INTERNALS∶∶DEFDOCUMENTATION macro46542
Ref: go to the DATA-LENS․TRANSDUCERS∶∶TRANSDUCER-LAMBDA macro46813
Ref: go to the DATA-LENS∶∶UPDATEF macro47001
Node: Internal functions47159
Ref: go to the DATA-LENS∶∶=>> function47357
Ref: go to the DATA-LENS∶∶CONS-NEW function47551
Ref: go to the DATA-LENS∶∶DEDUPLICATE function47749
Ref: go to the DATA-LENS․TRANSDUCERS∶∶EDUCTION function47936
Ref: go to the DATA-LENS∶∶FILLER function48132
Ref: go to the DATA-LENS․LENSES∶∶MAKE-ALIST-HISTORY-LENS function48331
Ref: go to the DATA-LENS∶∶MATCHING-LIST-REDUCER function48629
Ref: go to the DATA-LENS․TRANSDUCERS∶∶SEQ function48808
Ref: go to the DATA-LENS∶∶UPDATE function48998
Ref: go to the DATA-LENS․LENSES∶∶WRAP-CONSTANT function49185
Ref: go to the DATA-LENS․LENSES∶∶WRAP-IDENTITY function49402
Node: Internal generic functions49590
Ref: go to the DATA-LENS․LENSES∶∶CLONE generic function49833
Ref: go to the DATA-LENS․LENSES∶∶CLONE COMMON-LISP∶∶T AROUND method50098
Ref: go to the DATA-LENS․LENSES∶∶FMAP generic function50139
Ref: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T DATA-LENS․LENSES∶∶IDENTITY- method50394
Ref: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T DATA-LENS․LENSES∶∶CONSTANT- method50447
Ref: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T COMMON-LISP∶∶LIST method50495
Ref: go to the DATA-LENS․LENSES∶∶FMAP COMMON-LISP∶∶T COMMON-LISP∶∶VECTOR method50545
Ref: go to the DATA-LENS․TRANSDUCERS∶∶NEXT generic function50579
Ref: go to the DATA-LENS․TRANSDUCERS∶∶NEXT DATA-LENS․TRANSDUCERS∶∶LAZY-SEQUENCE method50758
Ref: go to the DATA-LENS․LENSES∶∶UNCONSTANT generic function50914
Ref: go to the DATA-LENS․LENSES∶∶UNCONSTANT DATA-LENS․LENSES∶∶CONSTANT- method51071
Ref: go to the DATA-LENS․LENSES∶∶UNIDENTITY generic function51294
Ref: go to the DATA-LENS․LENSES∶∶UNIDENTITY DATA-LENS․LENSES∶∶IDENTITY- method51451
Node: Internal classes51635
Ref: go to the DATA-LENS․LENSES∶∶CONSTANT- class51799
Ref: go to the DATA-LENS․LENSES∶∶IDENTITY- class52727
Node: Indexes53632
Node: Concept index53827
Node: Function index55724
Node: Variable index77919
Node: Data type index78516

End Tag Table


Local Variables:
coding: utf-8
End:
